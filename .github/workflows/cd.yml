name: CD Pipeline

on:
  # workflow_run:
  #   workflows:
  #     - CI Pipeline
  #   types:
  #     - completed
  push:
    branches:
      - master
      - workflow_dispatch


jobs:
  deploy:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Apply
        id: terraform_apply
        run: |
          terraform init
          terraform apply -auto-approve
          terraform output -json > terraform-output.json
        working-directory: terraform

      - name: Run the Script to Update Hosts File
        run: |
          cd ansible
          cat ../terraform/terraform-output.json  # Debug: Print the JSON file content
          chmod +x update_hosts.sh
          ./update_hosts.sh
      

      - name: Add SSH Key
        run: |
          # Write the SSH private key from the GitHub Secret to the `ssh_key.pem` file
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ansible/ssh_key.pem
          chmod 600 ansible/ssh_key.pem
        shell: bash

      - name: Debug Hosts File
        run: cat ansible/hosts.ini
      
      - name: Run Ansible Playbook - Agent
        run: |
          ansible-playbook -i ansible/hosts.ini ansible/agent_play.yml --private-key ansible/ssh_key.pem
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"

      # - name: Run Ansible Playbook - Prometheus
      #   run: |
      #     ansible-playbook -i ansible/hosts.ini ansible/prometheus_play.yml --private-key ansible/ssh_key.pem
      #   env:
      #     ANSIBLE_HOST_KEY_CHECKING: "False"

      - name: Destroy Terraform Resources
        if: always() # Ensure this runs regardless of the job's success or failure
        run: |
          terraform destroy -auto-approve
        working-directory: terraform
