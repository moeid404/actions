- name: Install kubectl
  script: kubectl.sh

- name: Install Kind
  script: kind.sh
######################################################
- name: Install Docker
  apt:
    name: docker.io
    state: present
  become: yes

- name: Ensure Docker is started and enabled
  service:
    name: docker
    state: started
    enabled: yes
  become: yes
######################################################
- name: Install kind
  get_url:
    url: "https://kind.sigs.k8s.io/dl/v0.25.0/kind-linux-amd64"
    dest: /usr/local/bin/kind
    mode: '0755'
  become: yes

- name: Create Kind cluster with Ingress Controller
  shell: |
    cat <<EOF | kind create cluster --config=-
    kind: Cluster
    apiVersion: kind.x-k8s.io/v1alpha4
    nodes:
    - role: control-plane
      kubeadmConfigPatches:
      - |
        kind: InitConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "ingress-ready=true"
      extraPortMappings:
      - containerPort: 80
        hostPort: 80
        protocol: TCP
      - containerPort: 443
        hostPort: 443
        protocol: TCP
    EOF
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
  args:
    executable: /bin/bash
  become: yes
######################################################
- name: Create SSL Secret
  script: SSL.sh

- name: Add app entry to /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: "127.0.0.1    nodeapp.com"
    state: present
    backup: yes

- name: Create a working directory for Kubernetes manifests
  file:
    path: /opt/k8s-manifests
    state: directory
    mode: '0755'

- name: Copy deployment.yml to the remote server
  copy:
    src: deployment.yml
    dest: /opt/k8s-manifests/deployment.yml

- name: Copy service.yml to the remote server
  copy:
    src: service.yml
    dest: /opt/k8s-manifests/service.yml

- name: Copy ingress.yml to the remote server
  copy:
    src: ingress.yml
    dest: /opt/k8s-manifests/ingress.yml

- name: Wait for ingress controller pods to be running
  shell: kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/name=ingress-nginx --timeout=300s
  register: ingress_status
  failed_when: "'condition met' not in ingress_status.stdout"

- name: Apply ingress.yml
  shell: kubectl apply -f /opt/k8s-manifests/ingress.yml
  register: ingress_apply
  failed_when: ingress_apply.rc != 0
  retries: 3
  delay: 10



- name: Apply service.yml
  shell: kubectl apply -f /opt/k8s-manifests/service.yml


- name: Apply ingress.yml
  shell: kubectl apply -f /opt/k8s-manifests/ingress.yml
